name: TestDriver.ai

on:
  push:
    branches: ["main", "windows-testdriver"]
  pull_request:
  workflow_dispatch:

jobs:
  start_container:
    runs-on: ubuntu-latest
    outputs:
      app_url: ${{ steps.expose.outputs.app_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Run Nginx Container
        run: |
          docker run -d -p 8080:80 nginx:latest
      
      - name: Install ngrok
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install ngrok
      
      - name: Start ngrok and expose
        id: expose
        run: |
          ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }} || { echo "Ngrok auth token failed"; exit 1; }
          ngrok http 8080 > ngrok.log &
          sleep 10
          curl --silent http://localhost:4040/api/tunnels > tunnels.json || { echo "Failed to fetch tunnels"; exit 1; }
          APP_URL=$(jq -r '.tunnels[0].public_url' tunnels.json)
          echo "Generated URL: $APP_URL"
          echo "app_url=$APP_URL" >> $GITHUB_OUTPUT
          curl $APP_URL || { echo "Health check failed"; exit 1; }

  # test_url:
  #   name: "Test URL"
  #   runs-on: ubuntu-latest
  #   needs: [start_container]
  #   steps:
  #     - run: |
  #         echo "Received URL: ${{needs.start_container.outputs.app_url}}"
  #         if [ -z "${{needs.start_container.outputs.app_url}}" ]; then
  #           echo "Error: URL is empty"
  #           exit 1
  #         fi
  #         curl "${{needs.start_container.outputs.app_url}}/health-check"
  # test:
  #   name: "TestDriver"
  #   runs-on: ubuntu-latest
  #   needs: [start_container]
  #   steps:
  #     - uses: testdriverai/action@main
  #       with:
  #         key: ${{secrets.TESTDRIVER_API_KEY}}
  #         prompt: |
  #           1. check if the app is running.
        #   prerun: |
        #     Start-Process "C:/Program Files/Google/Chrome/Application/chrome.exe" -ArgumentList "--start-maximized", "--load-extension=$(pwd)/node_modules/dashcam-chrome/build", "${{ needs.start_container.outputs.app_url }}"
        #     exit
        # env:
        #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}